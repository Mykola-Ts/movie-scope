{"version":3,"file":"static/js/730.faf456d8.chunk.js","mappings":"oOAGaA,EAAQC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gXAwBlBC,EAASH,EAAAA,GAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,qKAYnBG,EAAQL,EAAAA,GAAAA,GAASM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,4XAoBjBK,EAAeP,EAAAA,GAAAA,IAAUQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,uFAMzBO,GAAcT,EAAAA,EAAAA,IAAOU,EAAAA,IAAPV,CAAqBW,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,iIAUnCU,GAAcZ,EAAAA,EAAAA,IAAOa,EAAAA,IAAPb,CAAqBc,IAAAA,GAAAZ,EAAAA,EAAAA,GAAA,iIAUnCa,EAAYf,EAAAA,GAAAA,KAAWgB,IAAAA,GAAAd,EAAAA,EAAAA,GAAA,0PAavBe,EAAQjB,EAAAA,GAAAA,KAAWkB,IAAAA,GAAAhB,EAAAA,EAAAA,GAAA,oY,SCnFnBiB,EAAiB,SAAHC,GAAmB,IAAbC,EAAKD,EAALC,MAC/B,GAAKA,EAAL,CAEA,IAAQC,EAAwBC,EAAAA,GAAAA,QAAfC,EAAeD,EAAAA,GAAAA,WAChCE,EAMIJ,EALFK,MAAAA,OAAK,IAAAD,EAAG,GAAEA,EACVE,EAIEN,EAJFM,aAAYC,EAIVP,EAHFQ,MAAAA,OAAK,IAAAD,GAAQA,EACbE,EAEET,EAFFS,YAAWC,EAETV,EADFW,aAAAA,OAAY,IAAAD,EAAG,EAACA,EAEZE,EAAYH,EAAW,GAAAI,OACtBZ,EAAO,MAAAY,OAAKV,EAAU,KAAAU,OAAIJ,GAC7BK,EAEEC,EADc,IAAIC,KAAKV,GACGW,eAAiB,KAEjD,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACvC,EAAM,CACLwC,IAAKV,EACLW,IAAG,wBAAAV,OAA0BR,GAC7BmB,MAAOrB,EACPsB,OAAqB,IAAbtB,KAGVe,EAAAA,EAAAA,MAACxC,EAAK,CAAA0C,SAAA,CACHf,IAASa,EAAAA,EAAAA,MAAClC,EAAK,CAAAoC,SAAA,CAAEf,EAAM,QAExBa,EAAAA,EAAAA,MAAChC,EAAY,CAAAkC,SAAA,EACXC,EAAAA,EAAAA,KAACK,EAAAA,EAAM,CACLC,UAAU,EACVC,KAAM,GACNC,KAAM,EACNC,cAAenB,EACfoB,aAAaV,EAAAA,EAAAA,KAACjC,EAAW,CAAC4C,MAAM,sBAChCC,YAAYZ,EAAAA,EAAAA,KAAC9B,EAAW,CAACyC,MAAM,wBAGhCjB,IAAeM,EAAAA,EAAAA,KAAC3B,EAAS,CAAA0B,SAAEL,UAI/BP,IAASa,EAAAA,EAAAA,KAACzB,EAAK,CAAAwB,SAAC,UA1CH,CA6CpB,E,UC1Dac,EAAOvD,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qFAQhBsD,EAAWxD,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,0tBAkCpBuD,GAAazD,EAAAA,EAAAA,IAAO0D,EAAAA,GAAP1D,CAAYM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,yECzCzByD,EAAa,SAAHvC,GAAsC,IAADwC,EAAAxC,EAA/ByC,OAAAA,OAAM,IAAAD,EAAG,GAAEA,EAAAE,EAAA1C,EAAE2C,MAAAA,OAAK,IAAAD,EAAG,IAAGA,EACnD,OACEpB,EAAAA,EAAAA,KAACa,EAAI,CAAAd,SACFoB,EAAOG,KAAI,SAAA3C,GAAK,OACfqB,EAAAA,EAAAA,KAACc,EAAQ,CAAAf,UACPC,EAAAA,EAAAA,KAACe,EAAU,CAACQ,GAAE,WAAA/B,OAAab,EAAM6C,IAAMH,MAAOA,EAAMtB,UAClDC,EAAAA,EAAAA,KAACvB,EAAc,CAACE,MAAOA,OAFZA,EAAM6C,GAIV,KAInB,C,qMCZaC,EAAgBnE,EAAAA,GAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0HAS3BkE,EAAapE,EAAAA,GAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,+IAWzBmE,EAAcrE,EAAAA,GAAAA,MAAYM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,gpBA0B1BoE,GAAatE,EAAAA,EAAAA,IAAOuE,EAAAA,IAAPvE,CAAgBQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,2HAS7BsE,GAAYxE,EAAAA,EAAAA,IAAOyE,EAAAA,IAAPzE,CAAsBW,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,kJAWlCwE,EAAY1E,EAAAA,GAAAA,OAAac,IAAAA,GAAAZ,EAAAA,EAAAA,GAAA,snB,SCzDzByE,EAAmB,SAAHvD,GAMtB,IALLwD,EAAQxD,EAARwD,SACAC,EAAOzD,EAAPyD,QACAC,EAAW1D,EAAX0D,YACAC,EAAU3D,EAAV2D,WACAC,EAAa5D,EAAb4D,cAEAC,GAAoCC,EAAAA,EAAAA,UAAoB,OAAXJ,QAAW,IAAXA,EAAAA,EAAe,IAAGK,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAxDI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,IAEhCI,EAAAA,EAAAA,YAAU,WACRD,EAAyB,OAAXR,QAAW,IAAXA,EAAAA,EAAe,GAC/B,GAAG,CAACA,KAEJS,EAAAA,EAAAA,YAAU,WACJR,IACFO,EAAc,IACdN,GAAc,GAElB,GAAG,CAACD,EAAYC,IAqBhB,OACEzC,EAAAA,EAAAA,MAAC4B,EAAa,CAACqB,SApBK,SAAAC,GACpBA,EAAIC,iBAEJ,IAAMC,EAAcF,EAAIG,OAAOC,MAAMC,MAAMC,OAE3C,OAAKJ,GAOLf,EAASe,GAEF,WACLK,EAAAA,GAAAA,QACF,IAVEA,EAAAA,GAAAA,cACAA,EAAAA,EAAAA,IAAM,4CAA6CC,EAAAA,IAUvD,EAGyCxD,SAAA,EACrCF,EAAAA,EAAAA,MAAC6B,EAAU,CAAA3B,SAAA,EACTC,EAAAA,EAAAA,KAAC2B,EAAW,CACV6B,KAAK,OACLC,KAAK,QACLL,MAAOT,EACPe,YAAY,cACZC,QAAS,SAAAZ,GAAG,OAAIH,EAAcG,EAAIG,OAAOE,MAAM,KAEjDpD,EAAAA,EAAAA,KAAC4B,EAAU,IACVe,IAAc3C,EAAAA,EAAAA,KAAC8B,EAAS,CAAC8B,QAASzB,QAGrCnC,EAAAA,EAAAA,KAACgC,EAAS,CAACwB,KAAK,SAAQzD,SAAC,aAG/B,EClEac,EAAOvD,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kKAWhBuD,GAAazD,EAAAA,EAAAA,IAAO0D,EAAAA,GAAP1D,CAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,obCXzBqG,EAAS,SAAHnF,GAA4C,IAADoF,EAAApF,EAArCqF,OAAAA,OAAM,IAAAD,EAAG,GAAEA,EAAAE,EAAAtF,EAAEuF,aAAAA,OAAY,IAAAD,EAAG,GAAEA,EACrD,OACEhE,EAAAA,EAAAA,KAACa,EAAI,CAAAd,SACFgE,EAAOzC,KAAI,SAAA4C,GAAA,IAAG1C,EAAE0C,EAAF1C,GAAIiC,EAAIS,EAAJT,KAAI,OACrBzD,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACe,EAAU,CACTQ,GAAE,iBAAA/B,OAAmBgC,GACrB2C,UAAS,GAAA3E,OAAKyE,IAAiBzC,EAAG4C,WAAa,SAAW,IAAKrE,SAE9D0D,KALIjC,EAOJ,KAIb,E,oBC4FA,EAhGe,WAAO,IAAD6C,EAAAC,EACnBC,GAAwCC,EAAAA,EAAAA,MAAiBC,GAAA/B,EAAAA,EAAAA,GAAA6B,EAAA,GAAlDG,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpClC,GAAgCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCqC,EAAQnC,EAAA,GAAEoC,EAAWpC,EAAA,GAC5BqC,GAA0BtC,EAAAA,EAAAA,UAAkC,QAA1B6B,EAACK,EAAaK,IAAI,gBAAQ,IAAAV,EAAAA,EAAI,IAAGW,GAAAtC,EAAAA,EAAAA,GAAAoC,EAAA,GAA5D3B,EAAK6B,EAAA,GAAEC,EAAQD,EAAA,GACtBE,GAA4B1C,EAAAA,EAAAA,UAAS,IAAG2C,GAAAzC,EAAAA,EAAAA,GAAAwC,EAAA,GAAjCnB,EAAMoB,EAAA,GAAEC,EAASD,EAAA,GACxBE,GAA4B7C,EAAAA,EAAAA,UAAS,IAAG8C,GAAA5C,EAAAA,EAAAA,GAAA2C,EAAA,GAAjClE,EAAMmE,EAAA,GAAEC,EAASD,EAAA,GACxBE,GAAoChD,EAAAA,EAAAA,WAAS,GAAMiD,GAAA/C,EAAAA,EAAAA,GAAA8C,EAAA,GAA5CnD,EAAUoD,EAAA,GAAEnD,EAAamD,EAAA,GAChCC,GAAkClD,EAAAA,EAAAA,WAAS,GAAMmD,GAAAjD,EAAAA,EAAAA,GAAAgD,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GACxBG,GAAWC,EAAAA,EAAAA,MACXC,GAAgBC,EAAAA,EAAAA,UAChBC,GAAsBD,EAAAA,EAAAA,UACtBE,EAAiC,QAA5B7B,EAAGI,EAAaK,IAAI,gBAAQ,IAAAT,EAAAA,EAAI,IAE3CzB,EAAAA,EAAAA,YAAU,YACRuD,EAAAA,EAAAA,IAAkBhB,EACpB,GAAG,KAEHvC,EAAAA,EAAAA,YAAU,WACR,GAAKsD,EAkBL,OAhBAlB,EAAS,IACT3C,GAAc,GAEV4D,EAAoBG,SACtBH,EAAoBG,QAAQC,QAG9BJ,EAAoBG,QAAU,IAAIE,iBAElCC,EAAAA,EAAAA,IACEL,EACAZ,EACAM,EACAK,EAAoBG,SAGf,WACLH,EAAoBG,QAAQC,QAC5BhD,EAAAA,GAAAA,QACF,CACF,GAAG,CAAC6C,KAEJtD,EAAAA,EAAAA,YAAU,WACR,GAAKM,EAYL,OARI6C,EAAcK,SAChBL,EAAcK,QAAQC,QAGxBN,EAAcK,QAAU,IAAIE,iBAE5BE,EAAAA,EAAAA,IAAgBtD,EAAOoC,EAAWM,EAAcG,EAAcK,SAEvD,WACLL,EAAcK,QAAQC,QACtBhD,EAAAA,GAAAA,QACF,CACF,GAAG,CAACH,EAAOyB,IAgBX,OACE/E,EAAAA,EAAAA,MAAA,QAAAE,SAAA,EACEC,EAAAA,EAAAA,KAACiC,EAAgB,CACfC,SAjBW,SAAAiB,GACf8B,EAAS9B,GACT0B,EC1DgB,WAAH,IAAI6B,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAE,OAC5BG,OAAOC,gBAAgB,IAAIC,WAAWN,IAAOO,QAAO,SAACzF,EAAI0F,GAWvD,OARE1F,IAFF0F,GAAQ,IACG,GACHA,EAAK9C,SAAS,IACX8C,EAAO,IACTA,EAAO,IAAI9C,SAAS,IAAI+C,cACtBD,EAAO,GACV,IAEA,IAGV,GAAG,GAAG,CD6CQE,IAEZ1C,EAAa2C,IAAI,QAASlE,GAC1BwB,EAAgB,CAAExB,MAAAA,GACpB,EAYMhB,QAVU,WACd8C,EAAS,IACTN,EAAgB,CAAC,GACjBY,EAAU,GACZ,EAOMnD,YAAae,EACbd,WAAYA,EACZC,cAAeA,KAGjBtC,EAAAA,EAAAA,KAAC6D,EAAM,CAACE,OAAQA,EAAQE,aAAckC,IAErChF,EAAOyF,OAAS,IACf5G,EAAAA,EAAAA,KAACiB,EAAAA,EAAU,CAACE,OAAQA,EAAQE,MAAO,CAAEiG,KAAMxB,MAG7C9F,EAAAA,EAAAA,KAACuH,EAAAA,EAAM,CAAC3B,UAAWA,MAGzB,C","sources":["components/MoviesListItem/MoviesListItem.styled.js","components/MoviesListItem/MoviesListItem.jsx","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/MoviesSearchForm/MoviesSearchForm.styled.js","components/MoviesSearchForm/MoviesSearchForm.jsx","components/Genres/Genres.styles.js","components/Genres/Genres.jsx","pages/Movies.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\nimport { AiOutlineStar, AiTwotoneStar } from 'react-icons/ai';\n\nexport const Descr = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  gap: 8px;\n\n  padding: 8px;\n\n  @media screen and (min-width: 375px) {\n    height: 116px;\n  }\n\n  @media screen and (min-width: 768px) {\n    height: 100px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    gap: 12px;\n\n    height: 128px;\n    padding: 12px;\n  }\n`;\n\nexport const Poster = styled.img`\n  width: 100%;\n\n  @media screen and (min-width: 768px) {\n    height: 320px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    height: 388px;\n  }\n`;\n\nexport const Title = styled.h3`\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n\n  margin: auto 0;\n  overflow: hidden;\n\n  text-align: center;\n  font-size: 24px;\n  line-height: 1.17;\n  letter-spacing: -0.96px;\n\n  @media screen and (min-width: 768px) and (max-width: 1439px) {\n    font-size: 18px;\n    line-height: 1.33;\n    letter-spacing: -0.36px;\n  }\n`;\n\nexport const DescrWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const OutlineStar = styled(AiOutlineStar)`\n  width: 32px;\n  height: 32px;\n\n  @media screen and (min-width: 768px) {\n    width: 24px;\n    height: 24px;\n  }\n`;\n\nexport const TwotoneStar = styled(AiTwotoneStar)`\n  width: 32px;\n  height: 32px;\n\n  @media screen and (min-width: 768px) {\n    width: 24px;\n    height: 24px;\n  }\n`;\n\nexport const DescrYear = styled.span`\n  font-weight: 700;\n  font-size: 24px;\n  line-height: 1.17;\n  letter-spacing: -0.96px;\n\n  @media screen and (min-width: 768px) and (max-width: 1439px) {\n    font-size: 18px;\n    line-height: 1.33;\n    letter-spacing: -0.36px;\n  }\n`;\n\nexport const Adult = styled.span`\n  position: absolute;\n  top: 0;\n  right: 0;\n\n  padding: 8px;\n\n  font-weight: 700;\n  font-size: 24px;\n  line-height: 1.17;\n  letter-spacing: 0.96px;\n\n  color: var(--black-color);\n  background-color: var(--gray-color);\n\n  @media screen and (min-width: 768px) and (max-width: 1439px) {\n    font-size: 18px;\n    line-height: 1.33;\n    letter-spacing: 0.36px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport Rating from 'react-rating';\nimport posterPlaceholder from '../../img/poster-placeholder.jpg';\nimport { configurationImages } from 'helpers/helpers';\nimport {\n  Adult,\n  Descr,\n  DescrWrapper,\n  DescrYear,\n  OutlineStar,\n  Poster,\n  Title,\n  TwotoneStar,\n} from './MoviesListItem.styled';\n\nexport const MoviesListItem = ({ movie }) => {\n  if (!movie) return;\n\n  const { baseUrl, posterSize } = configurationImages;\n  const {\n    title = '',\n    release_date,\n    adult = false,\n    poster_path,\n    vote_average = 0,\n  } = movie;\n  const posterSrc = poster_path\n    ? `${baseUrl}/w${posterSize}/${poster_path}`\n    : posterPlaceholder;\n  const releaseDate = new Date(release_date);\n  const releaseYear = releaseDate.getFullYear() || null;\n\n  return (\n    <>\n      <Poster\n        src={posterSrc}\n        alt={`Poster for the movie ${title}`}\n        width={posterSize}\n        height={posterSize * 1.5}\n      />\n\n      <Descr>\n        {title && <Title>{title} </Title>}\n\n        <DescrWrapper>\n          <Rating\n            readonly={true}\n            stop={10}\n            step={2}\n            initialRating={vote_average}\n            emptySymbol={<OutlineStar color=\"var(--gold-color)\" />}\n            fullSymbol={<TwotoneStar color=\"var(--gold-color)\" />}\n          />\n\n          {releaseYear && <DescrYear>{releaseYear}</DescrYear>}\n        </DescrWrapper>\n      </Descr>\n\n      {adult && <Adult>18+</Adult>}\n    </>\n  );\n};\n\nMoviesListItem.propTypes = {\n  movie: PropTypes.object.isRequired,\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 40px 24px;\n\n  width: 100%;\n`;\n\nexport const ListItem = styled.li`\n  position: relative;\n  transform: scale(1, 1);\n\n  display: flex;\n\n  width: 100%;\n  border-radius: 8px;\n\n  overflow: hidden;\n\n  color: var(--black-color);\n  background-color: var(--gray-color);\n  box-shadow: var(--box-shadow);\n\n  transition: background-color var(--transition-duration)\n      var(--transition-timing-function),\n    transform var(--transition-duration) var(--transition-timing-function);\n\n  @media screen and (min-width: 768px) {\n    width: calc((100% - 32px * 2) / 3);\n  }\n\n  @media screen and (min-width: 1440px) {\n    width: calc((100% - 24px * 4) / 5);\n  }\n\n  &:is(:hover, :focus) {\n    transform: scale(1.04, 1.04);\n\n    background-color: var(--gray-active-color);\n  }\n`;\n\nexport const StyledLink = styled(Link)`\n  display: block;\n\n  width: 100%;\n\n  color: currentColor;\n`;\n","import PropTypes from 'prop-types';\nimport { MoviesListItem } from 'components/MoviesListItem/MoviesListItem';\nimport { List, ListItem, StyledLink } from './MoviesList.styled';\n\nexport const MoviesList = ({ movies = [], state = '/' }) => {\n  return (\n    <List>\n      {movies.map(movie => (\n        <ListItem key={movie.id}>\n          <StyledLink to={`/movies/${movie.id}`} state={state}>\n            <MoviesListItem movie={movie} />\n          </StyledLink>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n  state: PropTypes.object,\n};\n","import styled from 'styled-components';\nimport { BsSearch } from 'react-icons/bs';\nimport { AiOutlineClose } from 'react-icons/ai';\n\nexport const SearchbarForm = styled.form`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 100%;\n  margin-bottom: 40px;\n`;\n\nexport const InputLabel = styled.label`\n  position: relative;\n\n  width: 100%;\n  margin-right: 20px;\n\n  @media screen and (min-width: 1440px) {\n    width: 800px;\n  }\n`;\n\nexport const SearchInput = styled.input`\n  display: block;\n\n  width: 100%;\n  border: 2px solid transparent;\n  border-radius: 8px;\n  padding: 8px 32px;\n\n  overflow: hidden;\n\n  color: var(--black-color);\n  background-color: var(--gray-color);\n  outline: 2px solid transparent;\n\n  transition: background-color var(--transition-duration)\n      var(--transition-timing-function),\n    border-color var(--transition-duration) var(--transition-timing-function),\n    outline var(--transition-duration) var(--transition-timing-function);\n\n  &:focus {\n    background-color: var(--white-color);\n    border-color: var(--black-color);\n    outline-color: var(--white-color);\n  }\n`;\n\nexport const SearchIcon = styled(BsSearch)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n\n  fill: var(--black-color);\n`;\n\nexport const CloseIcon = styled(AiOutlineClose)`\n  position: absolute;\n  top: 50%;\n  right: 8px;\n  transform: translateY(-50%);\n\n  cursor: pointer;\n\n  fill: var(--black-color);\n`;\n\nexport const SubmitBtn = styled.button`\n  min-width: 100px;\n  border: 2px solid transparent;\n  border-radius: 8px;\n  padding: 8px 12px;\n\n  color: var(--black-color);\n  background-color: var(--gray-color);\n  outline: 2px solid transparent;\n\n  transition: background-color var(--transition-duration)\n      var(--transition-timing-function),\n    border-color var(--transition-duration) var(--transition-timing-function),\n    outline var(--transition-duration) var(--transition-timing-function);\n\n  &:is(:hover, :focus) {\n    background-color: var(--white-color);\n    border-color: var(--black-color);\n    outline-color: var(--white-color);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { toastWarningOptions } from 'helpers/helpers';\nimport {\n  SearchIcon,\n  InputLabel,\n  SearchInput,\n  SearchbarForm,\n  SubmitBtn,\n  CloseIcon,\n} from './MoviesSearchForm.styled';\n\nexport const MoviesSearchForm = ({\n  onSearch,\n  onReset,\n  paramsQuery,\n  clearInput,\n  setClearInput,\n}) => {\n  const [inputQuery, setInputQuery] = useState(paramsQuery ?? '');\n\n  useEffect(() => {\n    setInputQuery(paramsQuery ?? '');\n  }, [paramsQuery]);\n\n  useEffect(() => {\n    if (clearInput) {\n      setInputQuery('');\n      setClearInput(false);\n    }\n  }, [clearInput, setClearInput]);\n\n  const onSearchMovie = evt => {\n    evt.preventDefault();\n\n    const searchQuery = evt.target.query.value.trim();\n\n    if (!searchQuery) {\n      toast.remove();\n      toast('Input field is empty. Enter search query!', toastWarningOptions);\n\n      return;\n    }\n\n    onSearch(searchQuery);\n\n    return () => {\n      toast.remove();\n    };\n  };\n\n  return (\n    <SearchbarForm onSubmit={onSearchMovie}>\n      <InputLabel>\n        <SearchInput\n          type=\"text\"\n          name=\"query\"\n          value={inputQuery}\n          placeholder=\"Movie title\"\n          onInput={evt => setInputQuery(evt.target.value)}\n        />\n        <SearchIcon />\n        {inputQuery && <CloseIcon onClick={onReset} />}\n      </InputLabel>\n\n      <SubmitBtn type=\"submit\">Search</SubmitBtn>\n    </SearchbarForm>\n  );\n};\n\nMoviesSearchForm.propTypes = {\n  onSearch: PropTypes.func.isRequired,\n  onReset: PropTypes.func.isRequired,\n  paramsQuery: PropTypes.string,\n  clearInput: PropTypes.bool.isRequired,\n  setClearInput: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 16px 12px;\n\n  max-width: 1000px;\n  margin: 0 auto;\n  margin-bottom: 32px;\n`;\n\nexport const StyledLink = styled(Link)`\n  display: block;\n\n  border-radius: 8px;\n  padding: 4px 8px;\n\n  background-color: #ffffff1a;\n  color: currentColor;\n\n  transition: color var(--transition-duration) var(--transition-timing-function),\n    background-color var(--transition-duration)\n      var(--transition-timing-function);\n\n  &:is(:hover, :focus),\n  &.active {\n    color: var(--black-color);\n    background-color: var(--gray-active-color);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { List, StyledLink } from './Genres.styles';\n\nexport const Genres = ({ genres = [], currentGenre = '' }) => {\n  return (\n    <List>\n      {genres.map(({ id, name }) => (\n        <li key={id}>\n          <StyledLink\n            to={`/movies?genre=${id}`}\n            className={`${currentGenre === id.toString() ? 'active' : ''}`}\n          >\n            {name}\n          </StyledLink>\n        </li>\n      ))}\n    </List>\n  );\n};\n\nGenres.propTypes = {\n  genres: PropTypes.array.isRequired,\n  currentGenre: PropTypes.string,\n};\n","import { useEffect, useRef, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-hot-toast';\nimport {\n  getMovieByQuery,\n  getMovieGenreList,\n  getMoviesByGenre,\n} from 'services/movies';\nimport { MoviesSearchForm } from 'components/MoviesSearchForm/MoviesSearchForm';\nimport { Genres } from 'components/Genres/Genres';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [randomID, setRandomID] = useState('');\n  const [query, setQuery] = useState(searchParams.get('query') ?? '');\n  const [genres, setGenres] = useState([]);\n  const [movies, setMovies] = useState([]);\n  const [clearInput, setClearInput] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  const controllerRef = useRef();\n  const controllerRefGenres = useRef();\n  const genre = searchParams.get('genre') ?? '';\n\n  useEffect(() => {\n    getMovieGenreList(setGenres);\n  }, []);\n\n  useEffect(() => {\n    if (!genre) return;\n\n    setQuery('');\n    setClearInput(true);\n\n    if (controllerRefGenres.current) {\n      controllerRefGenres.current.abort();\n    }\n\n    controllerRefGenres.current = new AbortController();\n\n    getMoviesByGenre(\n      genre,\n      setMovies,\n      setIsLoading,\n      controllerRefGenres.current\n    );\n\n    return () => {\n      controllerRefGenres.current.abort();\n      toast.remove();\n    };\n  }, [genre]);\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n\n    if (controllerRef.current) {\n      controllerRef.current.abort();\n    }\n\n    controllerRef.current = new AbortController();\n\n    getMovieByQuery(query, setMovies, setIsLoading, controllerRef.current);\n\n    return () => {\n      controllerRef.current.abort();\n      toast.remove();\n    };\n  }, [query, randomID]);\n\n  const onSearch = query => {\n    setQuery(query);\n    setRandomID(nanoid());\n\n    searchParams.set('query', query);\n    setSearchParams({ query });\n  };\n\n  const onReset = () => {\n    setQuery('');\n    setSearchParams({});\n    setMovies([]);\n  };\n\n  return (\n    <main>\n      <MoviesSearchForm\n        onSearch={onSearch}\n        onReset={onReset}\n        paramsQuery={query}\n        clearInput={clearInput}\n        setClearInput={setClearInput}\n      />\n\n      <Genres genres={genres} currentGenre={genre} />\n\n      {movies.length > 0 && (\n        <MoviesList movies={movies} state={{ from: location }} />\n      )}\n\n      <Loader isLoading={isLoading} />\n    </main>\n  );\n};\n\nexport default Movies;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Descr","styled","_templateObject","_taggedTemplateLiteral","Poster","_templateObject2","Title","_templateObject3","DescrWrapper","_templateObject4","OutlineStar","AiOutlineStar","_templateObject5","TwotoneStar","AiTwotoneStar","_templateObject6","DescrYear","_templateObject7","Adult","_templateObject8","MoviesListItem","_ref","movie","baseUrl","configurationImages","posterSize","_movie$title","title","release_date","_movie$adult","adult","poster_path","_movie$vote_average","vote_average","posterSrc","concat","posterPlaceholder","releaseYear","Date","getFullYear","_jsxs","_Fragment","children","_jsx","src","alt","width","height","Rating","readonly","stop","step","initialRating","emptySymbol","color","fullSymbol","List","ListItem","StyledLink","Link","MoviesList","_ref$movies","movies","_ref$state","state","map","to","id","SearchbarForm","InputLabel","SearchInput","SearchIcon","BsSearch","CloseIcon","AiOutlineClose","SubmitBtn","MoviesSearchForm","onSearch","onReset","paramsQuery","clearInput","setClearInput","_useState","useState","_useState2","_slicedToArray","inputQuery","setInputQuery","useEffect","onSubmit","evt","preventDefault","searchQuery","target","query","value","trim","toast","toastWarningOptions","type","name","placeholder","onInput","onClick","Genres","_ref$genres","genres","_ref$currentGenre","currentGenre","_ref2","className","toString","_searchParams$get","_searchParams$get2","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","randomID","setRandomID","_useState3","get","_useState4","setQuery","_useState5","_useState6","setGenres","_useState7","_useState8","setMovies","_useState9","_useState10","_useState11","_useState12","isLoading","setIsLoading","location","useLocation","controllerRef","useRef","controllerRefGenres","genre","getMovieGenreList","current","abort","AbortController","getMoviesByGenre","getMovieByQuery","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toUpperCase","nanoid","set","from","Loader"],"sourceRoot":""}