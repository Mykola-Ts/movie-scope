{"version":3,"file":"static/js/447.657fed67.chunk.js","mappings":"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","sources":["components/MoviesListItem/MoviesListItem.styled.js","components/MoviesListItem/MoviesListItem.jsx","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/MoviesSearchForm/MoviesSearchForm.styled.js","components/MoviesSearchForm/MoviesSearchForm.jsx","components/Genres/Genres.styles.js","components/Genres/Genres.jsx","components/Pagination/Pagination.styled.js","components/Pagination/Pagination.jsx","hooks/usePagination.js","pages/Movies.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\nimport { AiOutlineStar, AiTwotoneStar } from 'react-icons/ai';\n\nexport const Descr = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  gap: 8px;\n\n  padding: 8px;\n\n  @media screen and (min-width: 375px) {\n    height: 116px;\n  }\n\n  @media screen and (min-width: 768px) {\n    height: 100px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    gap: 12px;\n\n    height: 128px;\n    padding: 12px;\n  }\n`;\n\nexport const Poster = styled.img`\n  width: 100%;\n\n  @media screen and (min-width: 768px) {\n    height: 320px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    height: 388px;\n  }\n`;\n\nexport const Title = styled.h3`\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n\n  margin: auto 0;\n  overflow: hidden;\n\n  text-align: center;\n  font-size: 24px;\n  line-height: 1.17;\n  letter-spacing: -0.96px;\n\n  @media screen and (min-width: 768px) and (max-width: 1439px) {\n    font-size: 18px;\n    line-height: 1.33;\n    letter-spacing: -0.36px;\n  }\n`;\n\nexport const DescrWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const OutlineStar = styled(AiOutlineStar)`\n  width: 32px;\n  height: 32px;\n\n  @media screen and (min-width: 768px) {\n    width: 24px;\n    height: 24px;\n  }\n`;\n\nexport const TwotoneStar = styled(AiTwotoneStar)`\n  width: 32px;\n  height: 32px;\n\n  @media screen and (min-width: 768px) {\n    width: 24px;\n    height: 24px;\n  }\n`;\n\nexport const DescrYear = styled.span`\n  font-weight: 700;\n  font-size: 24px;\n  line-height: 1.17;\n  letter-spacing: -0.96px;\n\n  @media screen and (min-width: 768px) and (max-width: 1439px) {\n    font-size: 18px;\n    line-height: 1.33;\n    letter-spacing: -0.36px;\n  }\n`;\n\nexport const Adult = styled.span`\n  position: absolute;\n  top: 0;\n  right: 0;\n\n  padding: 8px;\n\n  font-weight: 700;\n  font-size: 24px;\n  line-height: 1.17;\n  letter-spacing: 0.96px;\n\n  color: var(--black-color);\n  background-color: var(--gray-color);\n\n  @media screen and (min-width: 768px) and (max-width: 1439px) {\n    font-size: 18px;\n    line-height: 1.33;\n    letter-spacing: 0.36px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport Rating from 'react-rating';\nimport posterPlaceholder from '../../img/poster-placeholder.jpg';\nimport { configurationImages } from 'helpers/helpers';\nimport {\n  Adult,\n  Descr,\n  DescrWrapper,\n  DescrYear,\n  OutlineStar,\n  Poster,\n  Title,\n  TwotoneStar,\n} from './MoviesListItem.styled';\n\nexport const MoviesListItem = ({ movie }) => {\n  if (!movie) return;\n\n  const { baseUrl, posterSize } = configurationImages;\n  const {\n    title = '',\n    release_date,\n    adult = false,\n    poster_path,\n    vote_average = 0,\n  } = movie;\n  const posterSrc = poster_path\n    ? `${baseUrl}/w${posterSize}/${poster_path}`\n    : posterPlaceholder;\n  const releaseDate = new Date(release_date);\n  const releaseYear = releaseDate.getFullYear() || null;\n\n  return (\n    <>\n      <Poster\n        src={posterSrc}\n        alt={`Poster for the movie ${title}`}\n        width={posterSize}\n        height={posterSize * 1.5}\n      />\n\n      <Descr>\n        {title && <Title>{title} </Title>}\n\n        <DescrWrapper>\n          <Rating\n            readonly={true}\n            stop={10}\n            step={2}\n            initialRating={vote_average}\n            emptySymbol={<OutlineStar color=\"var(--gold-color)\" />}\n            fullSymbol={<TwotoneStar color=\"var(--gold-color)\" />}\n          />\n\n          {releaseYear && <DescrYear>{releaseYear}</DescrYear>}\n        </DescrWrapper>\n      </Descr>\n\n      {adult && <Adult>18+</Adult>}\n    </>\n  );\n};\n\nMoviesListItem.propTypes = {\n  movie: PropTypes.object.isRequired,\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 40px 24px;\n\n  width: 100%;\n  padding: 40px 0;\n`;\n\nexport const ListItem = styled.li`\n  position: relative;\n  transform: scale(1, 1);\n\n  display: flex;\n\n  width: 100%;\n  border-radius: 8px;\n\n  overflow: hidden;\n\n  color: var(--black-color);\n  background-color: var(--gray-color);\n  box-shadow: var(--box-shadow);\n\n  transition: background-color var(--transition-duration)\n      var(--transition-timing-function),\n    transform var(--transition-duration) var(--transition-timing-function);\n\n  @media screen and (min-width: 768px) {\n    width: calc((100% - 32px * 2) / 3);\n  }\n\n  @media screen and (min-width: 1440px) {\n    width: calc((100% - 24px * 4) / 5);\n  }\n\n  &:is(:hover, :focus) {\n    transform: scale(1.04, 1.04);\n\n    background-color: var(--gray-active-color);\n  }\n`;\n\nexport const StyledLink = styled(Link)`\n  display: block;\n\n  width: 100%;\n\n  color: currentColor;\n`;\n","import PropTypes from 'prop-types';\nimport { MoviesListItem } from 'components/MoviesListItem/MoviesListItem';\nimport { List, ListItem, StyledLink } from './MoviesList.styled';\n\nexport const MoviesList = ({ movies = [], state = '/', movieListRef }) => {\n  return (\n    <List ref={movieListRef}>\n      {movies.map(movie => (\n        <ListItem key={movie.id}>\n          <StyledLink to={`/movies/${movie.id}`} state={state}>\n            <MoviesListItem movie={movie} />\n          </StyledLink>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n  state: PropTypes.object,\n  movieListRef: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.any }),\n  ]),\n};\n","import styled from 'styled-components';\nimport { BsSearch } from 'react-icons/bs';\nimport { AiOutlineClose } from 'react-icons/ai';\n\nexport const SearchbarForm = styled.form`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 100%;\n  margin-bottom: 40px;\n`;\n\nexport const InputLabel = styled.label`\n  position: relative;\n\n  width: 100%;\n  margin-right: 20px;\n\n  @media screen and (min-width: 1440px) {\n    width: 800px;\n  }\n`;\n\nexport const SearchInput = styled.input`\n  display: block;\n\n  width: 100%;\n  border: 2px solid transparent;\n  border-radius: 8px;\n  padding: 8px 32px;\n\n  overflow: hidden;\n\n  color: var(--black-color);\n  background-color: var(--gray-color);\n  outline: 2px solid transparent;\n\n  transition: background-color var(--transition-duration)\n      var(--transition-timing-function),\n    border-color var(--transition-duration) var(--transition-timing-function),\n    outline var(--transition-duration) var(--transition-timing-function);\n\n  &:focus {\n    background-color: var(--white-color);\n    border-color: var(--black-color);\n    outline-color: var(--white-color);\n  }\n`;\n\nexport const SearchIcon = styled(BsSearch)`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n\n  fill: var(--black-color);\n`;\n\nexport const CloseIcon = styled(AiOutlineClose)`\n  position: absolute;\n  top: 50%;\n  right: 8px;\n  transform: translateY(-50%);\n\n  cursor: pointer;\n\n  fill: var(--black-color);\n`;\n\nexport const SubmitBtn = styled.button`\n  min-width: 100px;\n  border: 2px solid transparent;\n  border-radius: 8px;\n  padding: 8px 12px;\n\n  color: var(--black-color);\n  background-color: var(--gray-color);\n  outline: 2px solid transparent;\n\n  transition: background-color var(--transition-duration)\n      var(--transition-timing-function),\n    border-color var(--transition-duration) var(--transition-timing-function),\n    outline var(--transition-duration) var(--transition-timing-function);\n\n  &:is(:hover, :focus) {\n    background-color: var(--white-color);\n    border-color: var(--black-color);\n    outline-color: var(--white-color);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { toastWarningOptions } from 'helpers/helpers';\nimport {\n  SearchIcon,\n  InputLabel,\n  SearchInput,\n  SearchbarForm,\n  SubmitBtn,\n  CloseIcon,\n} from './MoviesSearchForm.styled';\n\nexport const MoviesSearchForm = ({\n  onSearch,\n  onReset,\n  paramsQuery,\n  clearInput,\n  setClearInput,\n}) => {\n  const [inputQuery, setInputQuery] = useState(paramsQuery ?? '');\n\n  useEffect(() => {\n    setInputQuery(paramsQuery ?? '');\n  }, [paramsQuery]);\n\n  useEffect(() => {\n    if (clearInput) {\n      setInputQuery('');\n      setClearInput(false);\n    }\n  }, [clearInput, setClearInput]);\n\n  const onSearchMovie = evt => {\n    evt.preventDefault();\n\n    const searchQuery = evt.target.query.value.trim();\n\n    if (!searchQuery) {\n      toast.remove();\n      toast('Input field is empty. Enter search query!', toastWarningOptions);\n\n      return;\n    }\n\n    onSearch(searchQuery);\n\n    return () => {\n      toast.remove();\n    };\n  };\n\n  return (\n    <SearchbarForm onSubmit={onSearchMovie}>\n      <InputLabel>\n        <SearchInput\n          type=\"text\"\n          name=\"query\"\n          value={inputQuery}\n          placeholder=\"Movie title\"\n          onInput={evt => setInputQuery(evt.target.value)}\n        />\n        <SearchIcon />\n        {inputQuery && <CloseIcon onClick={onReset} />}\n      </InputLabel>\n\n      <SubmitBtn type=\"submit\">Search</SubmitBtn>\n    </SearchbarForm>\n  );\n};\n\nMoviesSearchForm.propTypes = {\n  onSearch: PropTypes.func.isRequired,\n  onReset: PropTypes.func.isRequired,\n  paramsQuery: PropTypes.string,\n  clearInput: PropTypes.bool.isRequired,\n  setClearInput: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 16px 12px;\n\n  max-width: 1000px;\n  margin: 0 auto;\n`;\n\nexport const StyledLink = styled(Link)`\n  display: block;\n\n  border-radius: 8px;\n  padding: 4px 8px;\n\n  background-color: #ffffff1a;\n  color: currentColor;\n\n  transition: color var(--transition-duration) var(--transition-timing-function),\n    background-color var(--transition-duration)\n      var(--transition-timing-function);\n\n  &:is(:hover, :focus),\n  &.active {\n    color: var(--black-color);\n    background-color: var(--gray-active-color);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { List, StyledLink } from './Genres.styles';\n\nexport const Genres = ({ genres = [], currentGenre, setPage }) => {\n  return (\n    <List>\n      {genres.map(({ id, name }) => (\n        <li key={id}>\n          <StyledLink\n            to={`/movies?genre=${id}`}\n            className={`${currentGenre === id.toString() ? 'active' : ''}`}\n            onClick={() => setPage(1)}\n          >\n            {name}\n          </StyledLink>\n        </li>\n      ))}\n    </List>\n  );\n};\n\nGenres.propTypes = {\n  genres: PropTypes.array.isRequired,\n  currentGenre: PropTypes.string.isRequired,\n  setPage: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 16px;\n`;\n\nexport const PaginationButton = styled.button`\n  display: flex;\n  justify-self: center;\n  align-items: center;\n\n  border: 2px solid var(--black-color);\n  border-radius: 8px;\n  padding: 4px 8px;\n\n  color: var(--black-color);\n  background-color: var(--gray-color);\n  outline: 2px solid transparent;\n\n  transition: background-color var(--transition-duration)\n      var(--transition-timing-function),\n    border-color var(--transition-duration) var(--transition-timing-function),\n    outline var(--transition-duration) var(--transition-timing-function);\n\n  &:not(:disabled):is(:hover, :focus),\n  &:not(:disabled).active {\n    background-color: var(--white-color);\n    border-color: var(--black-color);\n    outline-color: var(--white-color);\n  }\n\n  &:disabled {\n    cursor: not-allowed;\n\n    border-color: var(--gray-color);\n    opacity: 0.5;\n  }\n\n  @media screen and (min-width: 768px) {\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { usePagination } from 'hooks/usePagination';\nimport { PaginationButton, Wrapper } from './Pagination.styled';\n\nexport const Pagination = ({\n  totalPages = 1,\n  currentPage = 1,\n  isLastPage = false,\n  onChangePage,\n}) => {\n  const pages = usePagination(currentPage, totalPages, 1);\n\n  return (\n    <Wrapper>\n      <PaginationButton\n        type=\"button\"\n        aria-label=\"Prev page\"\n        data-action=\"prev\"\n        disabled={currentPage === 1}\n        onClick={onChangePage}\n      >\n        Prev\n      </PaginationButton>\n\n      {pages.map((page, idx) =>\n        page === '...' ? (\n          <span key={idx}>...</span>\n        ) : (\n          <PaginationButton\n            key={idx}\n            type=\"button\"\n            aria-label={`Page ${page}`}\n            className={page === currentPage ? 'active' : ''}\n            onClick={evt => onChangePage(evt, page)}\n          >\n            {page}\n          </PaginationButton>\n        )\n      )}\n\n      <PaginationButton\n        type=\"button\"\n        aria-label=\"Next page\"\n        data-action=\"next\"\n        disabled={isLastPage}\n        onClick={onChangePage}\n      >\n        Next\n      </PaginationButton>\n    </Wrapper>\n  );\n};\n\nPagination.propTypes = {\n  totalPages: PropTypes.number.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  isLastPage: PropTypes.bool.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n};\n","import { useMemo } from 'react';\n\nexport function usePagination(currentPage, totalPages, delta = 1) {\n  return useMemo(() => {\n    const range = [];\n    const rangeWithDots = [];\n    let lastPage;\n\n    for (let i = 1; i <= totalPages; i += 1) {\n      if (\n        i === 1 ||\n        i === totalPages ||\n        (i >= currentPage - delta && i <= currentPage + delta)\n      ) {\n        range.push(i);\n      }\n    }\n\n    for (let page of range) {\n      if (lastPage) {\n        if (page - lastPage === 2) {\n          rangeWithDots.push(lastPage + 1);\n        } else if (page - lastPage > 2) {\n          rangeWithDots.push('...');\n        }\n      }\n\n      rangeWithDots.push(page);\n      lastPage = page;\n    }\n\n    return rangeWithDots;\n  }, [currentPage, totalPages, delta]);\n}\n","import { useEffect, useRef, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-hot-toast';\nimport {\n  getMovieByQuery,\n  getMovieGenreList,\n  getMoviesByGenre,\n} from 'services/movies';\nimport { MoviesSearchForm } from 'components/MoviesSearchForm/MoviesSearchForm';\nimport { Genres } from 'components/Genres/Genres';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { Pagination } from 'components/Pagination/Pagination';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [randomID, setRandomID] = useState('');\n  const [query, setQuery] = useState(searchParams.get('query') ?? '');\n  const [page, setPage] = useState(Number(searchParams.get('page') ?? 1));\n  const [totalPages, setTotalPages] = useState(1);\n  const [genres, setGenres] = useState([]);\n  const [movies, setMovies] = useState([]);\n  const [clearInput, setClearInput] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  const movieListRef = useRef();\n  const controllerRef = useRef();\n  const controllerRefGenres = useRef();\n  const genre = searchParams.get('genre') ?? '';\n\n  useEffect(() => {\n    getMovieGenreList(setGenres);\n  }, []);\n\n  useEffect(() => {\n    if (!genre) return;\n\n    setQuery('');\n    setClearInput(true);\n\n    if (controllerRefGenres.current) {\n      controllerRefGenres.current.abort();\n    }\n\n    controllerRefGenres.current = new AbortController();\n\n    getMoviesByGenre(\n      genre,\n      page,\n      setMovies,\n      setTotalPages,\n      setIsLoading,\n      controllerRefGenres.current\n    );\n\n    return () => {\n      controllerRefGenres.current.abort();\n      toast.remove();\n    };\n  }, [genre, page, totalPages]);\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n\n    if (controllerRef.current) {\n      controllerRef.current.abort();\n    }\n\n    controllerRef.current = new AbortController();\n\n    getMovieByQuery(\n      query,\n      page,\n      setMovies,\n      setTotalPages,\n      setIsLoading,\n      controllerRef.current\n    );\n\n    return () => {\n      controllerRef.current.abort();\n      toast.remove();\n    };\n  }, [query, page, randomID]);\n\n  const onSearch = query => {\n    setQuery(query);\n    setPage(1);\n    setRandomID(nanoid());\n\n    searchParams.set('query', query);\n    setSearchParams({ query });\n  };\n\n  const onReset = () => {\n    setQuery('');\n    setSearchParams({});\n    setMovies([]);\n  };\n\n  const onChangePage = (evt, selectedPage) => {\n    const target = evt.target;\n    const action = target.dataset.action;\n    let newPage = selectedPage || page;\n\n    if (action) {\n      if (action === 'next') {\n        if (page === totalPages) return;\n\n        newPage += 1;\n      } else {\n        if (page === 1) return;\n\n        newPage -= 1;\n      }\n    }\n\n    setPage(newPage);\n    searchParams.set('page', newPage);\n    setSearchParams(searchParams);\n\n    movieListRef?.current.scrollIntoView({ block: 'start' });\n  };\n\n  return (\n    <main>\n      <MoviesSearchForm\n        onSearch={onSearch}\n        onReset={onReset}\n        paramsQuery={query}\n        clearInput={clearInput}\n        setClearInput={setClearInput}\n      />\n\n      <Genres genres={genres} currentGenre={genre} setPage={setPage} />\n\n      {movies.length > 0 && (\n        <>\n          <MoviesList\n            movies={movies}\n            state={{ from: location }}\n            movieListRef={movieListRef}\n          />\n\n          {totalPages > 1 && (\n            <Pagination\n              totalPages={totalPages}\n              currentPage={page}\n              isLastPage={page === totalPages}\n              onChangePage={onChangePage}\n            />\n          )}\n        </>\n      )}\n\n      <Loader isLoading={isLoading} />\n    </main>\n  );\n};\n\nexport default Movies;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Descr","styled","_templateObject","_taggedTemplateLiteral","Poster","_templateObject2","Title","_templateObject3","DescrWrapper","_templateObject4","OutlineStar","AiOutlineStar","_templateObject5","TwotoneStar","AiTwotoneStar","_templateObject6","DescrYear","_templateObject7","Adult","_templateObject8","MoviesListItem","_ref","movie","baseUrl","configurationImages","posterSize","_movie$title","title","release_date","_movie$adult","adult","poster_path","_movie$vote_average","vote_average","posterSrc","concat","posterPlaceholder","releaseYear","Date","getFullYear","_jsxs","_Fragment","children","_jsx","src","alt","width","height","Rating","readonly","stop","step","initialRating","emptySymbol","color","fullSymbol","List","ListItem","StyledLink","Link","MoviesList","_ref$movies","movies","_ref$state","state","movieListRef","ref","map","to","id","SearchbarForm","InputLabel","SearchInput","SearchIcon","BsSearch","CloseIcon","AiOutlineClose","SubmitBtn","MoviesSearchForm","onSearch","onReset","paramsQuery","clearInput","setClearInput","_useState","useState","_useState2","_slicedToArray","inputQuery","setInputQuery","useEffect","onSubmit","evt","preventDefault","searchQuery","target","query","value","trim","toast","toastWarningOptions","type","name","placeholder","onInput","onClick","Genres","_ref$genres","genres","currentGenre","setPage","_ref2","className","toString","Wrapper","PaginationButton","Pagination","_ref$totalPages","totalPages","_ref$currentPage","currentPage","_ref$isLastPage","isLastPage","onChangePage","pages","delta","arguments","length","undefined","useMemo","lastPage","range","rangeWithDots","i","push","_i","_range","page","usePagination","disabled","idx","_searchParams$get","_searchParams$get2","_searchParams$get3","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","randomID","setRandomID","_useState3","get","_useState4","setQuery","_useState5","Number","_useState6","_useState7","_useState8","setTotalPages","_useState9","_useState10","setGenres","_useState11","_useState12","setMovies","_useState13","_useState14","_useState15","_useState16","isLoading","setIsLoading","location","useLocation","useRef","controllerRef","controllerRefGenres","genre","getMovieGenreList","current","abort","AbortController","getMoviesByGenre","getMovieByQuery","size","crypto","getRandomValues","Uint8Array","reduce","byte","toUpperCase","nanoid","set","from","selectedPage","action","dataset","newPage","scrollIntoView","block","Loader"],"sourceRoot":""}