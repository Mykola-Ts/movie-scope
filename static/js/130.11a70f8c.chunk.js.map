{"version":3,"file":"static/js/130.11a70f8c.chunk.js","mappings":"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","sources":["components/CastItem/CastItem.styled.js","components/CastItem/CastItem.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Photo = styled.img`\n  width: 184px;\n\n  @media screen and (max-width: 767px) {\n    margin: 0 auto;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 140px;\n    height: 210px;\n  }\n`;\n\nexport const Descr = styled.div`\n  padding: 16px;\n\n  font-size: 18px;\n  line-height: 1.33;\n  letter-spacing: 0.36px;\n\n  @media screen and (max-width: 767px) {\n    text-align: center;\n  }\n`;\n\nexport const Name = styled.h4`\n  margin-bottom: 8px;\n\n  font-size: 22px;\n  line-height: normal;\n  letter-spacing: 0.44px;\n`;\n\nexport const DescrItem = styled.p`\n  &:not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\nexport const DescrItemValue = styled.span`\n  font-weight: 700;\n`;\n","import PropTypes from 'prop-types';\nimport photoPlaceholder from '../../img/avatar-placeholder.jpg';\nimport { configurationImages } from 'helpers/helpers';\nimport {\n  Descr,\n  DescrItem,\n  DescrItemValue,\n  Name,\n  Photo,\n} from './CastItem.styled';\n\nexport const CastItem = ({ castItem }) => {\n  if (!castItem) return;\n\n  const {\n    name = '',\n    character = '',\n    popularity = 0,\n    profile_path = '',\n  } = castItem;\n  const { baseUrl, profileSize } = configurationImages;\n  const posterSrc = profile_path\n    ? `${baseUrl}/w${profileSize}/${profile_path}`\n    : photoPlaceholder;\n  const popularityItem = popularity.toFixed(1);\n\n  return (\n    <>\n      <Photo\n        src={posterSrc}\n        alt={name}\n        width={profileSize}\n        height={profileSize * 1.5}\n      />\n\n      <Descr>\n        <Name>{name}</Name>\n\n        <DescrItem>\n          Character: <DescrItemValue>{character}</DescrItemValue>\n        </DescrItem>\n\n        <DescrItem>\n          Popularity: <DescrItemValue>{popularityItem}</DescrItemValue>\n        </DescrItem>\n      </Descr>\n    </>\n  );\n};\n\nCastItem.propTypes = {\n  castItem: PropTypes.object.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  width: 100%;\n\n  @media screen and (min-width: 1440px) {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 32px;\n  }\n`;\n\nexport const ListItem = styled.li`\n  border-radius: 8px;\n\n  overflow: hidden;\n\n  color: var(--black-color);\n  background-color: var(--gray-color);\n  box-shadow: var(--box-shadow);\n\n  @media screen and (max-width: 1439px) {\n    &:not(:last-child) {\n      margin-bottom: 16px;\n    }\n  }\n\n  @media screen and (min-width: 768px) {\n    display: flex;\n    align-items: center;\n    gap: 24px;\n\n    width: 100%;\n  }\n\n  @media screen and (min-width: 1440px) {\n    width: calc((100% - 32px) / 2);\n  }\n`;\n\nexport const NoCastText = styled.p`\n  text-align: center;\n  font-size: 18px;\n  line-height: 1.33;\n  letter-spacing: 0.36px;\n\n  @media screen and (min-width: 1440px) {\n    font-size: 22px;\n    line-height: normal;\n    letter-spacing: 0.44px;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-hot-toast';\nimport { getCastMovieById } from 'services/movies';\nimport { CastItem } from 'components/CastItem/CastItem';\nimport { Loader } from 'components/Loader/Loader';\nimport { List, ListItem, NoCastText } from './Cast.styled';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n\n    const controller = new AbortController();\n\n    getCastMovieById(movieId, setMovieCast, setIsLoading, controller);\n\n    return () => {\n      controller.abort();\n      toast.remove();\n    };\n  }, [movieId]);\n\n  return (\n    <div>\n      {movieCast.length ? (\n        <List>\n          {movieCast.map(item => (\n            <ListItem key={item.credit_id}>\n              <CastItem castItem={item} />\n            </ListItem>\n          ))}\n        </List>\n      ) : (\n        <NoCastText>No cast information available.</NoCastText>\n      )}\n\n      <Loader isLoading={isLoading} />\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["Photo","styled","_templateObject","_taggedTemplateLiteral","Descr","_templateObject2","Name","_templateObject3","DescrItem","_templateObject4","DescrItemValue","_templateObject5","CastItem","_ref","castItem","_castItem$name","name","_castItem$character","character","_castItem$popularity","popularity","_castItem$profile_pat","profile_path","baseUrl","configurationImages","profileSize","posterSrc","concat","photoPlaceholder","popularityItem","toFixed","_jsxs","_Fragment","children","_jsx","src","alt","width","height","List","ListItem","NoCastText","_useState","useState","_useState2","_slicedToArray","movieCast","setMovieCast","_useState3","_useState4","isLoading","setIsLoading","movieId","useParams","useEffect","controller","AbortController","getCastMovieById","abort","toast","length","map","item","credit_id","Loader"],"sourceRoot":""}